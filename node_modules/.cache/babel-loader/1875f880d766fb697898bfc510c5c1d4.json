{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('clsx')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'clsx'], factory) : (global = global || self, factory(global.reactToastify = {}, global.react, global.clsx));\n})(this, function (exports, React, cx) {\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n  var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);\n\n  function isNum(v) {\n    return typeof v === 'number' && !isNaN(v);\n  }\n\n  function isBool(v) {\n    return typeof v === 'boolean';\n  }\n\n  function isStr(v) {\n    return typeof v === 'string';\n  }\n\n  function isFn(v) {\n    return typeof v === 'function';\n  }\n\n  function parseClassName(v) {\n    return isStr(v) || isFn(v) ? v : null;\n  }\n\n  function isToastIdValid(toastId) {\n    return toastId != null;\n  }\n\n  function getAutoCloseDelay(toastAutoClose, containerAutoClose) {\n    return toastAutoClose === false || isNum(toastAutoClose) && toastAutoClose > 0 ? toastAutoClose : containerAutoClose;\n  }\n\n  function canBeRendered(content) {\n    return React.isValidElement(content) || isStr(content) || isFn(content) || isNum(content);\n  }\n\n  const POSITION = {\n    TOP_LEFT: 'top-left',\n    TOP_RIGHT: 'top-right',\n    TOP_CENTER: 'top-center',\n    BOTTOM_LEFT: 'bottom-left',\n    BOTTOM_RIGHT: 'bottom-right',\n    BOTTOM_CENTER: 'bottom-center'\n  };\n  const TYPE = {\n    INFO: 'info',\n    SUCCESS: 'success',\n    WARNING: 'warning',\n    ERROR: 'error',\n    DEFAULT: 'default'\n  };\n  /**\r\n   * Used to collapse toast after exit animation\r\n   */\n\n  function collapseToast(node, done, duration\n  /* Default.COLLAPSE_DURATION */\n  ) {\n    if (duration === void 0) {\n      duration = 300;\n    }\n\n    const {\n      scrollHeight,\n      style\n    } = node;\n    requestAnimationFrame(() => {\n      style.minHeight = 'initial';\n      style.height = scrollHeight + 'px';\n      style.transition = \"all \" + duration + \"ms\";\n      requestAnimationFrame(() => {\n        style.height = '0';\n        style.padding = '0';\n        style.margin = '0';\n        setTimeout(done, duration);\n      });\n    });\n  }\n  /**\r\n   * Css animation that just work.\r\n   * You could use animate.css for instance\r\n   *\r\n   *\r\n   * ```\r\n   * cssTransition({\r\n   *   enter: \"animate__animated animate__bounceIn\",\r\n   *   exit: \"animate__animated animate__bounceOut\"\r\n   * })\r\n   * ```\r\n   *\r\n   */\n\n\n  function cssTransition(_ref) {\n    let {\n      enter,\n      exit,\n      appendPosition = false,\n      collapse = true,\n      collapseDuration = 300\n      /* Default.COLLAPSE_DURATION */\n\n    } = _ref;\n    return function ToastTransition(_ref2) {\n      let {\n        children,\n        position,\n        preventExitTransition,\n        done,\n        nodeRef,\n        isIn\n      } = _ref2;\n      const enterClassName = appendPosition ? enter + \"--\" + position : enter;\n      const exitClassName = appendPosition ? exit + \"--\" + position : exit;\n      const animationStep = React.useRef(0\n      /* AnimationStep.Enter */\n      );\n      React.useLayoutEffect(() => {\n        const node = nodeRef.current;\n        const classToToken = enterClassName.split(' ');\n\n        const onEntered = e => {\n          if (e.target !== nodeRef.current) return;\n          node.dispatchEvent(new Event(\"d\"\n          /* SyntheticEvent.ENTRANCE_ANIMATION_END */\n          ));\n          node.removeEventListener('animationend', onEntered);\n          node.removeEventListener('animationcancel', onEntered);\n\n          if (animationStep.current === 0\n          /* AnimationStep.Enter */\n          && e.type !== 'animationcancel') {\n            node.classList.remove(...classToToken);\n          }\n        };\n\n        const onEnter = () => {\n          node.classList.add(...classToToken);\n          node.addEventListener('animationend', onEntered);\n          node.addEventListener('animationcancel', onEntered);\n        };\n\n        onEnter();\n      }, []);\n      React.useEffect(() => {\n        const node = nodeRef.current;\n\n        const onExited = () => {\n          node.removeEventListener('animationend', onExited);\n          collapse ? collapseToast(node, done, collapseDuration) : done();\n        };\n\n        const onExit = () => {\n          animationStep.current = 1\n          /* AnimationStep.Exit */\n          ;\n          node.className += \" \" + exitClassName;\n          node.addEventListener('animationend', onExited);\n        };\n\n        if (!isIn) preventExitTransition ? onExited() : onExit();\n      }, [isIn]);\n      return React__default[\"default\"].createElement(React__default[\"default\"].Fragment, null, children);\n    };\n  }\n\n  function toToastItem(toast, status) {\n    return {\n      content: toast.content,\n      containerId: toast.props.containerId,\n      id: toast.props.toastId,\n      theme: toast.props.theme,\n      type: toast.props.type,\n      data: toast.props.data || {},\n      isLoading: toast.props.isLoading,\n      icon: toast.props.icon,\n      status\n    };\n  }\n\n  const eventManager = {\n    list: new Map(),\n    emitQueue: new Map(),\n\n    on(event, callback) {\n      this.list.has(event) || this.list.set(event, []);\n      this.list.get(event).push(callback);\n      return this;\n    },\n\n    off(event, callback) {\n      if (callback) {\n        const cb = this.list.get(event).filter(cb => cb !== callback);\n        this.list.set(event, cb);\n        return this;\n      }\n\n      this.list.delete(event);\n      return this;\n    },\n\n    cancelEmit(event) {\n      const timers = this.emitQueue.get(event);\n\n      if (timers) {\n        timers.forEach(clearTimeout);\n        this.emitQueue.delete(event);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Enqueue the event at the end of the call stack\r\n     * Doing so let the user call toast as follow:\r\n     * toast('1')\r\n     * toast('2')\r\n     * toast('3')\r\n     * Without setTimemout the code above will not work\r\n     */\n    emit(event) {\n      this.list.has(event) && this.list.get(event).forEach(callback => {\n        const timer = setTimeout(() => {\n          // @ts-ignore\n          callback(...[].slice.call(arguments, 1));\n        }, 0);\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event).push(timer);\n      });\n    }\n\n  };\n\n  const Svg = _ref => {\n    let {\n      theme,\n      type,\n      ...rest\n    } = _ref;\n    return React__default[\"default\"].createElement(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      width: \"100%\",\n      height: \"100%\",\n      fill: theme === 'colored' ? 'currentColor' : \"var(--toastify-icon-color-\" + type + \")\",\n      ...rest\n    });\n  };\n\n  function Warning(props) {\n    return React__default[\"default\"].createElement(Svg, { ...props\n    }, React__default[\"default\"].createElement(\"path\", {\n      d: \"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\"\n    }));\n  }\n\n  function Info(props) {\n    return React__default[\"default\"].createElement(Svg, { ...props\n    }, React__default[\"default\"].createElement(\"path\", {\n      d: \"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\"\n    }));\n  }\n\n  function Success(props) {\n    return React__default[\"default\"].createElement(Svg, { ...props\n    }, React__default[\"default\"].createElement(\"path\", {\n      d: \"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\"\n    }));\n  }\n\n  function Error(props) {\n    return React__default[\"default\"].createElement(Svg, { ...props\n    }, React__default[\"default\"].createElement(\"path\", {\n      d: \"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\"\n    }));\n  }\n\n  function Spinner() {\n    return React__default[\"default\"].createElement(\"div\", {\n      className: \"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__spinner\"\n    });\n  }\n\n  const Icons = {\n    info: Info,\n    warning: Warning,\n    success: Success,\n    error: Error,\n    spinner: Spinner\n  };\n\n  const maybeIcon = type => type in Icons;\n\n  function getIcon(_ref2) {\n    let {\n      theme,\n      type,\n      isLoading,\n      icon\n    } = _ref2;\n    let Icon = null;\n    const iconProps = {\n      theme,\n      type\n    };\n    if (icon === false) ;else if (isFn(icon)) {\n      Icon = icon(iconProps);\n    } else if (React.isValidElement(icon)) {\n      Icon = React.cloneElement(icon, iconProps);\n    } else if (isStr(icon) || isNum(icon)) {\n      Icon = icon;\n    } else if (isLoading) {\n      Icon = Icons.spinner();\n    } else if (maybeIcon(type)) {\n      Icon = Icons[type](iconProps);\n    }\n    return Icon;\n  }\n\n  function useToastContainer(props) {\n    const [, forceUpdate] = React.useReducer(x => x + 1, 0);\n    const [toastIds, setToastIds] = React.useState([]);\n    const containerRef = React.useRef(null);\n    const toastToRender = React.useRef(new Map()).current;\n\n    const isToastActive = id => toastIds.indexOf(id) !== -1;\n\n    const instance = React.useRef({\n      toastKey: 1,\n      displayedToast: 0,\n      count: 0,\n      queue: [],\n      props,\n      containerId: null,\n      isToastActive,\n      getToast: id => toastToRender.get(id)\n    }).current;\n    React.useEffect(() => {\n      instance.containerId = props.containerId;\n      eventManager.cancelEmit(3\n      /* Event.WillUnmount */\n      ).on(0\n      /* Event.Show */\n      , buildToast).on(1\n      /* Event.Clear */\n      , toastId => containerRef.current && removeToast(toastId)).on(5\n      /* Event.ClearWaitingQueue */\n      , clearWaitingQueue).emit(2\n      /* Event.DidMount */\n      , instance);\n      return () => {\n        toastToRender.clear();\n        eventManager.emit(3\n        /* Event.WillUnmount */\n        , instance);\n      };\n    }, []);\n    React.useEffect(() => {\n      instance.props = props;\n      instance.isToastActive = isToastActive;\n      instance.displayedToast = toastIds.length;\n    });\n\n    function clearWaitingQueue(_ref) {\n      let {\n        containerId\n      } = _ref;\n      const {\n        limit\n      } = instance.props;\n\n      if (limit && (!containerId || instance.containerId === containerId)) {\n        instance.count -= instance.queue.length;\n        instance.queue = [];\n      }\n    }\n\n    function removeToast(toastId) {\n      setToastIds(state => isToastIdValid(toastId) ? state.filter(id => id !== toastId) : []);\n    }\n\n    function dequeueToast() {\n      const {\n        toastContent,\n        toastProps,\n        staleId\n      } = instance.queue.shift();\n      appendToast(toastContent, toastProps, staleId);\n    }\n    /**\r\n     * check if a container is attached to the dom\r\n     * check for multi-container, build only if associated\r\n     * check for duplicate toastId if no update\r\n     */\n\n\n    function isNotValid(options) {\n      return !containerRef.current || instance.props.enableMultiContainer && options.containerId !== instance.props.containerId || toastToRender.has(options.toastId) && options.updateId == null;\n    } // this function and all the function called inside needs to rely on refs\n\n\n    function buildToast(content, _ref2) {\n      let {\n        delay,\n        staleId,\n        ...options\n      } = _ref2;\n      if (!canBeRendered(content) || isNotValid(options)) return;\n      const {\n        toastId,\n        updateId,\n        data\n      } = options;\n      const {\n        props\n      } = instance;\n\n      const closeToast = () => removeToast(toastId);\n\n      const isNotAnUpdate = updateId == null;\n      if (isNotAnUpdate) instance.count++;\n      const toastProps = {\n        toastId,\n        updateId,\n        data,\n        containerId: options.containerId,\n        isLoading: options.isLoading,\n        theme: options.theme || props.theme,\n        icon: options.icon != null ? options.icon : props.icon,\n        isIn: false,\n        key: options.key || instance.toastKey++,\n        type: options.type,\n        closeToast: closeToast,\n        closeButton: options.closeButton,\n        rtl: props.rtl,\n        position: options.position || props.position,\n        transition: options.transition || props.transition,\n        className: parseClassName(options.className || props.toastClassName),\n        bodyClassName: parseClassName(options.bodyClassName || props.bodyClassName),\n        style: options.style || props.toastStyle,\n        bodyStyle: options.bodyStyle || props.bodyStyle,\n        onClick: options.onClick || props.onClick,\n        pauseOnHover: isBool(options.pauseOnHover) ? options.pauseOnHover : props.pauseOnHover,\n        pauseOnFocusLoss: isBool(options.pauseOnFocusLoss) ? options.pauseOnFocusLoss : props.pauseOnFocusLoss,\n        draggable: isBool(options.draggable) ? options.draggable : props.draggable,\n        draggablePercent: options.draggablePercent || props.draggablePercent,\n        draggableDirection: options.draggableDirection || props.draggableDirection,\n        closeOnClick: isBool(options.closeOnClick) ? options.closeOnClick : props.closeOnClick,\n        progressClassName: parseClassName(options.progressClassName || props.progressClassName),\n        progressStyle: options.progressStyle || props.progressStyle,\n        autoClose: options.isLoading ? false : getAutoCloseDelay(options.autoClose, props.autoClose),\n        hideProgressBar: isBool(options.hideProgressBar) ? options.hideProgressBar : props.hideProgressBar,\n        progress: options.progress,\n        role: options.role || props.role,\n\n        deleteToast() {\n          const removed = toToastItem(toastToRender.get(toastId), 'removed');\n          toastToRender.delete(toastId);\n          eventManager.emit(4\n          /* Event.Change */\n          , removed);\n          const queueLen = instance.queue.length;\n          instance.count = isToastIdValid(toastId) ? instance.count - 1 : instance.count - instance.displayedToast;\n          if (instance.count < 0) instance.count = 0;\n\n          if (queueLen > 0) {\n            const freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit;\n\n            if (queueLen === 1 || freeSlot === 1) {\n              instance.displayedToast++;\n              dequeueToast();\n            } else {\n              const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n              instance.displayedToast = toDequeue;\n\n              for (let i = 0; i < toDequeue; i++) dequeueToast();\n            }\n          } else {\n            forceUpdate();\n          }\n        }\n\n      };\n      toastProps.iconOut = getIcon(toastProps);\n      if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n      if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n      toastProps.closeButton = props.closeButton;\n\n      if (options.closeButton === false || canBeRendered(options.closeButton)) {\n        toastProps.closeButton = options.closeButton;\n      } else if (options.closeButton === true) {\n        toastProps.closeButton = canBeRendered(props.closeButton) ? props.closeButton : true;\n      }\n\n      let toastContent = content;\n\n      if (React.isValidElement(content) && !isStr(content.type)) {\n        toastContent = React.cloneElement(content, {\n          closeToast,\n          toastProps,\n          data\n        });\n      } else if (isFn(content)) {\n        toastContent = content({\n          closeToast,\n          toastProps,\n          data\n        });\n      } // not handling limit + delay by design. Waiting for user feedback first\n\n\n      if (props.limit && props.limit > 0 && instance.count > props.limit && isNotAnUpdate) {\n        instance.queue.push({\n          toastContent,\n          toastProps,\n          staleId\n        });\n      } else if (isNum(delay)) {\n        setTimeout(() => {\n          appendToast(toastContent, toastProps, staleId);\n        }, delay);\n      } else {\n        appendToast(toastContent, toastProps, staleId);\n      }\n    }\n\n    function appendToast(content, toastProps, staleId) {\n      const {\n        toastId\n      } = toastProps;\n      if (staleId) toastToRender.delete(staleId);\n      const toast = {\n        content,\n        props: toastProps\n      };\n      toastToRender.set(toastId, toast);\n      setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n      eventManager.emit(4\n      /* Event.Change */\n      , toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated'));\n    }\n\n    function getToastToRender(cb) {\n      const toRender = new Map();\n      const collection = Array.from(toastToRender.values());\n      if (props.newestOnTop) collection.reverse();\n      collection.forEach(toast => {\n        const {\n          position\n        } = toast.props;\n        toRender.has(position) || toRender.set(position, []);\n        toRender.get(position).push(toast);\n      });\n      return Array.from(toRender, p => cb(p[0], p[1]));\n    }\n\n    return {\n      getToastToRender,\n      containerRef,\n      isToastActive\n    };\n  }\n\n  function getX(e) {\n    return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;\n  }\n\n  function getY(e) {\n    return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;\n  }\n\n  function useToast(props) {\n    const [isRunning, setIsRunning] = React.useState(false);\n    const [preventExitTransition, setPreventExitTransition] = React.useState(false);\n    const toastRef = React.useRef(null);\n    const drag = React.useRef({\n      start: 0,\n      x: 0,\n      y: 0,\n      delta: 0,\n      removalDistance: 0,\n      canCloseOnClick: true,\n      canDrag: false,\n      boundingRect: null,\n      didMove: false\n    }).current;\n    const syncProps = React.useRef(props);\n    const {\n      autoClose,\n      pauseOnHover,\n      closeToast,\n      onClick,\n      closeOnClick\n    } = props;\n    React.useEffect(() => {\n      syncProps.current = props;\n    });\n    React.useEffect(() => {\n      if (toastRef.current) toastRef.current.addEventListener(\"d\"\n      /* SyntheticEvent.ENTRANCE_ANIMATION_END */\n      , playToast, {\n        once: true\n      });\n      if (isFn(props.onOpen)) props.onOpen(React.isValidElement(props.children) && props.children.props);\n      return () => {\n        const props = syncProps.current;\n        if (isFn(props.onClose)) props.onClose(React.isValidElement(props.children) && props.children.props);\n      };\n    }, []);\n    React.useEffect(() => {\n      props.pauseOnFocusLoss && bindFocusEvents();\n      return () => {\n        props.pauseOnFocusLoss && unbindFocusEvents();\n      };\n    }, [props.pauseOnFocusLoss]);\n\n    function onDragStart(e) {\n      if (props.draggable) {\n        bindDragEvents();\n        const toast = toastRef.current;\n        drag.canCloseOnClick = true;\n        drag.canDrag = true;\n        drag.boundingRect = toast.getBoundingClientRect();\n        toast.style.transition = '';\n        drag.x = getX(e.nativeEvent);\n        drag.y = getY(e.nativeEvent);\n\n        if (props.draggableDirection === \"x\"\n        /* Direction.X */\n        ) {\n            drag.start = drag.x;\n            drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);\n          } else {\n          drag.start = drag.y;\n          drag.removalDistance = toast.offsetHeight * (props.draggablePercent === 80\n          /* Default.DRAGGABLE_PERCENT */\n          ? props.draggablePercent * 1.5 : props.draggablePercent / 100);\n        }\n      }\n    }\n\n    function onDragTransitionEnd() {\n      if (drag.boundingRect) {\n        const {\n          top,\n          bottom,\n          left,\n          right\n        } = drag.boundingRect;\n\n        if (props.pauseOnHover && drag.x >= left && drag.x <= right && drag.y >= top && drag.y <= bottom) {\n          pauseToast();\n        } else {\n          playToast();\n        }\n      }\n    }\n\n    function playToast() {\n      setIsRunning(true);\n    }\n\n    function pauseToast() {\n      setIsRunning(false);\n    }\n\n    function bindFocusEvents() {\n      if (!document.hasFocus()) pauseToast();\n      window.addEventListener('focus', playToast);\n      window.addEventListener('blur', pauseToast);\n    }\n\n    function unbindFocusEvents() {\n      window.removeEventListener('focus', playToast);\n      window.removeEventListener('blur', pauseToast);\n    }\n\n    function bindDragEvents() {\n      drag.didMove = false;\n      document.addEventListener('mousemove', onDragMove);\n      document.addEventListener('mouseup', onDragEnd);\n      document.addEventListener('touchmove', onDragMove);\n      document.addEventListener('touchend', onDragEnd);\n    }\n\n    function unbindDragEvents() {\n      document.removeEventListener('mousemove', onDragMove);\n      document.removeEventListener('mouseup', onDragEnd);\n      document.removeEventListener('touchmove', onDragMove);\n      document.removeEventListener('touchend', onDragEnd);\n    }\n\n    function onDragMove(e) {\n      const toast = toastRef.current;\n\n      if (drag.canDrag && toast) {\n        drag.didMove = true;\n        if (isRunning) pauseToast();\n        drag.x = getX(e);\n        drag.y = getY(e);\n\n        if (props.draggableDirection === \"x\"\n        /* Direction.X */\n        ) {\n            drag.delta = drag.x - drag.start;\n          } else {\n          drag.delta = drag.y - drag.start;\n        } // prevent false positif during a toast click\n\n\n        if (drag.start !== drag.x) drag.canCloseOnClick = false;\n        toast.style.transform = \"translate\" + props.draggableDirection + \"(\" + drag.delta + \"px)\";\n        toast.style.opacity = \"\" + (1 - Math.abs(drag.delta / drag.removalDistance));\n      }\n    }\n\n    function onDragEnd() {\n      unbindDragEvents();\n      const toast = toastRef.current;\n\n      if (drag.canDrag && drag.didMove && toast) {\n        drag.canDrag = false;\n\n        if (Math.abs(drag.delta) > drag.removalDistance) {\n          setPreventExitTransition(true);\n          props.closeToast();\n          return;\n        }\n\n        toast.style.transition = 'transform 0.2s, opacity 0.2s';\n        toast.style.transform = \"translate\" + props.draggableDirection + \"(0)\";\n        toast.style.opacity = '1';\n      }\n    }\n\n    const eventHandlers = {\n      onMouseDown: onDragStart,\n      onTouchStart: onDragStart,\n      onMouseUp: onDragTransitionEnd,\n      onTouchEnd: onDragTransitionEnd\n    };\n\n    if (autoClose && pauseOnHover) {\n      eventHandlers.onMouseEnter = pauseToast;\n      eventHandlers.onMouseLeave = playToast;\n    } // prevent toast from closing when user drags the toast\n\n\n    if (closeOnClick) {\n      eventHandlers.onClick = e => {\n        onClick && onClick(e);\n        drag.canCloseOnClick && closeToast();\n      };\n    }\n\n    return {\n      playToast,\n      pauseToast,\n      isRunning,\n      preventExitTransition,\n      toastRef,\n      eventHandlers\n    };\n  }\n\n  function CloseButton(_ref) {\n    let {\n      closeToast,\n      theme,\n      ariaLabel = 'close'\n    } = _ref;\n    return React__default[\"default\"].createElement(\"button\", {\n      className: \"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__close-button \" + \"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__close-button--\" + theme,\n      type: \"button\",\n      onClick: e => {\n        e.stopPropagation();\n        closeToast(e);\n      },\n      \"aria-label\": ariaLabel\n    }, React__default[\"default\"].createElement(\"svg\", {\n      \"aria-hidden\": \"true\",\n      viewBox: \"0 0 14 16\"\n    }, React__default[\"default\"].createElement(\"path\", {\n      fillRule: \"evenodd\",\n      d: \"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n    })));\n  }\n\n  function ProgressBar(_ref) {\n    let {\n      delay,\n      isRunning,\n      closeToast,\n      type,\n      hide,\n      className,\n      style: userStyle,\n      controlledProgress,\n      progress,\n      rtl,\n      isIn,\n      theme\n    } = _ref;\n    const style = { ...userStyle,\n      animationDuration: delay + \"ms\",\n      animationPlayState: isRunning ? 'running' : 'paused',\n      opacity: hide ? 0 : 1\n    };\n    if (controlledProgress) style.transform = \"scaleX(\" + progress + \")\";\n    const defaultClassName = cx__default[\"default\"](\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__progress-bar\", controlledProgress ? \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__progress-bar--controlled\" : \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__progress-bar--animated\", \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__progress-bar-theme--\" + theme, \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__progress-bar--\" + type, {\n      [\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__progress-bar--rtl\"]: rtl\n    });\n    const classNames = isFn(className) ? className({\n      rtl,\n      type,\n      defaultClassName\n    }) : cx__default[\"default\"](defaultClassName, className); // 🧐 controlledProgress is derived from progress\n    // so if controlledProgress is set\n    // it means that this is also the case for progress\n\n    const animationEvent = {\n      [controlledProgress && progress >= 1 ? 'onTransitionEnd' : 'onAnimationEnd']: controlledProgress && progress < 1 ? null : () => {\n        isIn && closeToast();\n      }\n    }; // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n    return React__default[\"default\"].createElement(\"div\", {\n      role: \"progressbar\",\n      \"aria-hidden\": hide ? 'true' : 'false',\n      \"aria-label\": \"notification timer\",\n      className: classNames,\n      style: style,\n      ...animationEvent\n    });\n  }\n\n  ProgressBar.defaultProps = {\n    type: TYPE.DEFAULT,\n    hide: false\n  };\n\n  const Toast = props => {\n    const {\n      isRunning,\n      preventExitTransition,\n      toastRef,\n      eventHandlers\n    } = useToast(props);\n    const {\n      closeButton,\n      children,\n      autoClose,\n      onClick,\n      type,\n      hideProgressBar,\n      closeToast,\n      transition: Transition,\n      position,\n      className,\n      style,\n      bodyClassName,\n      bodyStyle,\n      progressClassName,\n      progressStyle,\n      updateId,\n      role,\n      progress,\n      rtl,\n      toastId,\n      deleteToast,\n      isIn,\n      isLoading,\n      iconOut,\n      theme\n    } = props;\n    const defaultClassName = cx__default[\"default\"](\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast\", \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast-theme--\" + theme, \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast--\" + type, {\n      [\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__toast--rtl\"]: rtl\n    });\n    const cssClasses = isFn(className) ? className({\n      rtl,\n      position,\n      type,\n      defaultClassName\n    }) : cx__default[\"default\"](defaultClassName, className);\n    const isProgressControlled = !!progress;\n    const closeButtonProps = {\n      closeToast,\n      type,\n      theme\n    };\n    let Close = null;\n    if (closeButton === false) ;else if (isFn(closeButton)) {\n      Close = closeButton(closeButtonProps);\n    } else if (React__default[\"default\"].isValidElement(closeButton)) {\n      Close = React__default[\"default\"].cloneElement(closeButton, closeButtonProps);\n    } else {\n      Close = CloseButton(closeButtonProps);\n    }\n    return React__default[\"default\"].createElement(Transition, {\n      isIn: isIn,\n      done: deleteToast,\n      position: position,\n      preventExitTransition: preventExitTransition,\n      nodeRef: toastRef\n    }, React__default[\"default\"].createElement(\"div\", {\n      id: toastId,\n      onClick: onClick,\n      className: cssClasses,\n      ...eventHandlers,\n      style: style,\n      ref: toastRef\n    }, React__default[\"default\"].createElement(\"div\", { ...(isIn && {\n        role: role\n      }),\n      className: isFn(bodyClassName) ? bodyClassName({\n        type\n      }) : cx__default[\"default\"](\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__toast-body\", bodyClassName),\n      style: bodyStyle\n    }, iconOut != null && React__default[\"default\"].createElement(\"div\", {\n      className: cx__default[\"default\"](\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__toast-icon\", {\n        [\"Toastify\"\n        /* Default.CSS_NAMESPACE */\n        + \"--animate-icon \" + \"Toastify\"\n        /* Default.CSS_NAMESPACE */\n        + \"__zoom-enter\"]: !isLoading\n      })\n    }, iconOut), React__default[\"default\"].createElement(\"div\", null, children)), Close, (autoClose || isProgressControlled) && React__default[\"default\"].createElement(ProgressBar, { ...(updateId && !isProgressControlled ? {\n        key: \"pb-\" + updateId\n      } : {}),\n      rtl: rtl,\n      theme: theme,\n      delay: autoClose,\n      isRunning: isRunning,\n      isIn: isIn,\n      closeToast: closeToast,\n      hide: hideProgressBar,\n      type: type,\n      style: progressStyle,\n      className: progressClassName,\n      controlledProgress: isProgressControlled,\n      progress: progress\n    })));\n  };\n\n  const Bounce = cssTransition({\n    enter: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__bounce-enter\",\n    exit: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__bounce-exit\",\n    appendPosition: true\n  });\n  const Slide = cssTransition({\n    enter: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__slide-enter\",\n    exit: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__slide-exit\",\n    appendPosition: true\n  });\n  const Zoom = cssTransition({\n    enter: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__zoom-enter\",\n    exit: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__zoom-exit\"\n  });\n  const Flip = cssTransition({\n    enter: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__flip-enter\",\n    exit: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"--animate \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__flip-exit\"\n  }); // https://github.com/yannickcr/eslint-plugin-react/issues/3140\n\n  const ToastContainer = React.forwardRef((props, ref) => {\n    const {\n      getToastToRender,\n      containerRef,\n      isToastActive\n    } = useToastContainer(props);\n    const {\n      className,\n      style,\n      rtl,\n      containerId\n    } = props;\n\n    function getClassName(position) {\n      const defaultClassName = cx__default[\"default\"](\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__toast-container\", \"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__toast-container--\" + position, {\n        [\"Toastify\"\n        /* Default.CSS_NAMESPACE */\n        + \"__toast-container--rtl\"]: rtl\n      });\n      return isFn(className) ? className({\n        position,\n        rtl,\n        defaultClassName\n      }) : cx__default[\"default\"](defaultClassName, parseClassName(className));\n    }\n\n    React.useEffect(() => {\n      if (ref) {\n        ref.current = containerRef.current;\n      }\n    }, []);\n    return React__default[\"default\"].createElement(\"div\", {\n      ref: containerRef,\n      className: \"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      ,\n      id: containerId\n    }, getToastToRender((position, toastList) => {\n      const containerStyle = !toastList.length ? { ...style,\n        pointerEvents: 'none'\n      } : { ...style\n      };\n      return React__default[\"default\"].createElement(\"div\", {\n        className: getClassName(position),\n        style: containerStyle,\n        key: \"container-\" + position\n      }, toastList.map((_ref, i) => {\n        let {\n          content,\n          props: toastProps\n        } = _ref;\n        return React__default[\"default\"].createElement(Toast, { ...toastProps,\n          isIn: isToastActive(toastProps.toastId),\n          style: { ...toastProps.style,\n            '--nth': i + 1,\n            '--len': toastList.length\n          },\n          key: \"toast-\" + toastProps.key\n        }, content);\n      }));\n    }));\n  });\n  ToastContainer.displayName = 'ToastContainer';\n  ToastContainer.defaultProps = {\n    position: POSITION.TOP_RIGHT,\n    transition: Bounce,\n    rtl: false,\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeButton: CloseButton,\n    pauseOnHover: true,\n    pauseOnFocusLoss: true,\n    closeOnClick: true,\n    newestOnTop: false,\n    draggable: true,\n    draggablePercent: 80\n    /* Default.DRAGGABLE_PERCENT */\n    ,\n    draggableDirection: \"x\"\n    /* Direction.X */\n    ,\n    role: 'alert',\n    theme: 'light'\n  };\n  let containers = new Map();\n  let latestInstance;\n  let queue = [];\n  /**\r\n   * Get the toast by id, given it's in the DOM, otherwise returns null\r\n   */\n\n  function getToast(toastId, _ref) {\n    let {\n      containerId\n    } = _ref;\n    const container = containers.get(containerId || latestInstance);\n    if (!container) return null;\n    return container.getToast(toastId);\n  }\n  /**\r\n   * Generate a random toastId\r\n   */\n\n\n  function generateToastId() {\n    return Math.random().toString(36).substring(2, 9);\n  }\n  /**\r\n   * Generate a toastId or use the one provided\r\n   */\n\n\n  function getToastId(options) {\n    if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n      return options.toastId;\n    }\n\n    return generateToastId();\n  }\n  /**\r\n   * If the container is not mounted, the toast is enqueued and\r\n   * the container lazy mounted\r\n   */\n\n\n  function dispatchToast(content, options) {\n    if (containers.size > 0) {\n      eventManager.emit(0\n      /* Event.Show */\n      , content, options);\n    } else {\n      queue.push({\n        content,\n        options\n      });\n    }\n\n    return options.toastId;\n  }\n  /**\r\n   * Merge provided options with the defaults settings and generate the toastId\r\n   */\n\n\n  function mergeOptions(type, options) {\n    return { ...options,\n      type: options && options.type || type,\n      toastId: getToastId(options)\n    };\n  }\n\n  function createToastByType(type) {\n    return (content, options) => dispatchToast(content, mergeOptions(type, options));\n  }\n\n  function toast(content, options) {\n    return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n  }\n\n  toast.loading = (content, options) => dispatchToast(content, mergeOptions(TYPE.DEFAULT, {\n    isLoading: true,\n    autoClose: false,\n    closeOnClick: false,\n    closeButton: false,\n    draggable: false,\n    ...options\n  }));\n\n  function handlePromise(promise, _ref2, options) {\n    let {\n      pending,\n      error,\n      success\n    } = _ref2;\n    let id;\n\n    if (pending) {\n      id = isStr(pending) ? toast.loading(pending, options) : toast.loading(pending.render, { ...options,\n        ...pending\n      });\n    }\n\n    const resetParams = {\n      isLoading: null,\n      autoClose: null,\n      closeOnClick: null,\n      closeButton: null,\n      draggable: null,\n      delay: 100\n    };\n\n    const resolver = (type, input, result) => {\n      // Remove the toast if the input has not been provided. This prevents the toast from hanging\n      // in the pending state if a success/error toast has not been provided.\n      if (input == null) {\n        toast.dismiss(id);\n        return;\n      }\n\n      const baseParams = {\n        type,\n        ...resetParams,\n        ...options,\n        data: result\n      };\n      const params = isStr(input) ? {\n        render: input\n      } : input; // if the id is set we know that it's an update\n\n      if (id) {\n        toast.update(id, { ...baseParams,\n          ...params\n        });\n      } else {\n        // using toast.promise without loading\n        toast(params.render, { ...baseParams,\n          ...params\n        });\n      }\n\n      return result;\n    };\n\n    const p = isFn(promise) ? promise() : promise; //call the resolvers only when needed\n\n    p.then(result => resolver('success', success, result)).catch(err => resolver('error', error, err));\n    return p;\n  }\n\n  toast.promise = handlePromise;\n  toast.success = createToastByType(TYPE.SUCCESS);\n  toast.info = createToastByType(TYPE.INFO);\n  toast.error = createToastByType(TYPE.ERROR);\n  toast.warning = createToastByType(TYPE.WARNING);\n  toast.warn = toast.warning;\n\n  toast.dark = (content, options) => dispatchToast(content, mergeOptions(TYPE.DEFAULT, {\n    theme: 'dark',\n    ...options\n  }));\n  /**\r\n   * Remove toast programmaticaly\r\n   */\n\n\n  toast.dismiss = id => {\n    if (containers.size > 0) {\n      eventManager.emit(1\n      /* Event.Clear */\n      , id);\n    } else {\n      queue = queue.filter(t => isToastIdValid(id) && t.options.toastId !== id);\n    }\n  };\n  /**\r\n   * Clear waiting queue when limit is used\r\n   */\n\n\n  toast.clearWaitingQueue = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return eventManager.emit(5\n    /* Event.ClearWaitingQueue */\n    , params);\n  };\n  /**\r\n   * return true if one container is displaying the toast\r\n   */\n\n\n  toast.isActive = id => {\n    let isToastActive = false;\n    containers.forEach(container => {\n      if (container.isToastActive && container.isToastActive(id)) {\n        isToastActive = true;\n      }\n    });\n    return isToastActive;\n  };\n\n  toast.update = function (toastId, options) {\n    if (options === void 0) {\n      options = {};\n    } // if you call toast and toast.update directly nothing will be displayed\n    // this is why I defered the update\n\n\n    setTimeout(() => {\n      const toast = getToast(toastId, options);\n\n      if (toast) {\n        const {\n          props: oldOptions,\n          content: oldContent\n        } = toast;\n        const nextOptions = { ...oldOptions,\n          ...options,\n          toastId: options.toastId || toastId,\n          updateId: generateToastId()\n        };\n        if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n        const content = nextOptions.render || oldContent;\n        delete nextOptions.render;\n        dispatchToast(content, nextOptions);\n      }\n    }, 0);\n  };\n  /**\r\n   * Used for controlled progress bar.\r\n   */\n\n\n  toast.done = id => {\n    toast.update(id, {\n      progress: 1\n    });\n  };\n  /**\r\n   * Subscribe to change when a toast is added, removed and updated\r\n   *\r\n   * Usage:\r\n   * ```\r\n   * const unsubscribe = toast.onChange((payload) => {\r\n   *   switch (payload.status) {\r\n   *   case \"added\":\r\n   *     // new toast added\r\n   *     break;\r\n   *   case \"updated\":\r\n   *     // toast updated\r\n   *     break;\r\n   *   case \"removed\":\r\n   *     // toast has been removed\r\n   *     break;\r\n   *   }\r\n   * })\r\n   * ```\r\n   */\n\n\n  toast.onChange = callback => {\n    eventManager.on(4\n    /* Event.Change */\n    , callback);\n    return () => {\n      eventManager.off(4\n      /* Event.Change */\n      , callback);\n    };\n  };\n\n  toast.POSITION = POSITION;\n  toast.TYPE = TYPE;\n  /**\r\n   * Wait until the ToastContainer is mounted to dispatch the toast\r\n   * and attach isActive method\r\n   */\n\n  eventManager.on(2\n  /* Event.DidMount */\n  , containerInstance => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n    queue.forEach(item => {\n      eventManager.emit(0\n      /* Event.Show */\n      , item.content, item.options);\n    });\n    queue = [];\n  }).on(3\n  /* Event.WillUnmount */\n  , containerInstance => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager.off(0\n      /* Event.Show */\n      ).off(1\n      /* Event.Clear */\n      ).off(5\n      /* Event.ClearWaitingQueue */\n      );\n    }\n  });\n  exports.Bounce = Bounce;\n  exports.Flip = Flip;\n  exports.Icons = Icons;\n  exports.Slide = Slide;\n  exports.ToastContainer = ToastContainer;\n  exports.Zoom = Zoom;\n  exports.collapseToast = collapseToast;\n  exports.cssTransition = cssTransition;\n  exports.toast = toast;\n  exports.useToast = useToast;\n  exports.useToastContainer = useToastContainer;\n});","map":{"version":3,"sources":["../src/utils/propValidator.ts","../src/utils/constant.ts","../src/utils/collapseToast.ts","../src/utils/cssTransition.tsx","../src/utils/mapper.ts","../src/core/eventManager.ts","../src/components/Icons.tsx","../src/hooks/useToastContainer.ts","../src/hooks/useToast.ts","../src/components/CloseButton.tsx","../src/components/ProgressBar.tsx","../src/components/Toast.tsx","../src/components/Transitions.tsx","../src/components/ToastContainer.tsx","../src/core/toast.ts"],"names":["isNum","v","isNaN","isBool","isStr","isFn","parseClassName","isToastIdValid","toastId","getAutoCloseDelay","toastAutoClose","containerAutoClose","canBeRendered","content","isValidElement","POSITION","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","TYPE","INFO","SUCCESS","WARNING","ERROR","DEFAULT","collapseToast","node","done","duration","style","requestAnimationFrame","scrollHeight","setTimeout","cssTransition","appendPosition","collapse","collapseDuration","isIn","enterClassName","enter","exitClassName","exit","animationStep","useRef","useLayoutEffect","nodeRef","classToToken","onEntered","e","onEnter","useEffect","onExited","onExit","preventExitTransition","React","toToastItem","toast","status","containerId","id","theme","type","data","isLoading","icon","eventManager","list","emitQueue","on","off","cb","cancelEmit","timers","emit","callback","timer","Svg","rest","viewBox","width","height","fill","props","d","className","Icons","info","warning","success","error","spinner","Spinner","maybeIcon","getIcon","Icon","iconProps","cloneElement","useToastContainer","useReducer","x","useState","containerRef","toastToRender","isToastActive","toastIds","instance","toastKey","displayedToast","count","queue","getToast","removeToast","limit","setToastIds","state","staleId","appendToast","options","isNotValid","closeToast","isNotAnUpdate","updateId","toastProps","key","closeButton","rtl","position","transition","bodyClassName","bodyStyle","onClick","pauseOnHover","pauseOnFocusLoss","draggable","draggablePercent","draggableDirection","closeOnClick","progressClassName","progressStyle","autoClose","hideProgressBar","progress","role","deleteToast","removed","queueLen","freeSlot","dequeueToast","toDequeue","i","forceUpdate","toastContent","toRender","collection","Array","p","useToast","toastRef","drag","start","y","delta","removalDistance","canCloseOnClick","canDrag","boundingRect","didMove","syncProps","once","bindFocusEvents","unbindFocusEvents","bindDragEvents","getX","getY","right","pauseToast","playToast","setIsRunning","document","window","Math","unbindDragEvents","setPreventExitTransition","eventHandlers","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onDragTransitionEnd","CloseButton","ariaLabel","fillRule","ProgressBar","animationDuration","delay","animationPlayState","isRunning","opacity","hide","defaultClassName","cx","controlledProgress","classNames","animationEvent","Toast","cssClasses","isProgressControlled","closeButtonProps","Close","ref","iconOut","Bounce","Slide","Zoom","Flip","ToastContainer","forwardRef","getToastToRender","containerStyle","toastList","pointerEvents","getClassName","length","newestOnTop","containers","container","generateToastId","getToastId","dispatchToast","mergeOptions","pending","resetParams","resolver","input","baseParams","result","params","render","promise","err","createToastByType","t","oldContent","nextOptions","containerInstance","latestInstance","item"],"mappings":"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","sourcesContent":["import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return isStr(v) || isFn(v) ? v : null;\n}\n\nexport function isToastIdValid(toastId?: Id) {\n  return toastId != null;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n","import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\nexport const enum Default {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify',\n  DRAGGABLE_PERCENT = 80\n}\n\nexport const enum Direction {\n  X = 'x',\n  Y = 'y'\n}\n\nexport const enum SyntheticEvent {\n  ENTRANCE_ANIMATION_END = 'd'\n}\n","import { Default } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = Default.COLLAPSE_DURATION\n) {\n  const { scrollHeight, style } = node;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration as number);\n    });\n  });\n}\n","import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport { collapseToast } from './collapseToast';\nimport { Default, SyntheticEvent } from './constant';\n\nimport { ToastTransitionProps } from '../types';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Append current toast position to the classname.\n   * If multiple classes are provided, only the last one will get the position\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when exit animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nconst enum AnimationStep {\n  Enter,\n  Exit\n}\n\n/**\n * Css animation that just work.\n * You could use animate.css for instance\n *\n *\n * ```\n * cssTransition({\n *   enter: \"animate__animated animate__bounceIn\",\n *   exit: \"animate__animated animate__bounceOut\"\n * })\n * ```\n *\n */\nexport function cssTransition({\n  enter,\n  exit,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = Default.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    nodeRef,\n    isIn\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n    const animationStep = useRef(AnimationStep.Enter);\n\n    useLayoutEffect(() => {\n      const node = nodeRef.current!;\n      const classToToken = enterClassName.split(' ');\n\n      const onEntered = (e: AnimationEvent) => {\n        if (e.target !== nodeRef.current) return;\n\n        node.dispatchEvent(new Event(SyntheticEvent.ENTRANCE_ANIMATION_END));\n        node.removeEventListener('animationend', onEntered);\n        node.removeEventListener('animationcancel', onEntered);\n        if (\n          animationStep.current === AnimationStep.Enter &&\n          e.type !== 'animationcancel'\n        ) {\n          node.classList.remove(...classToToken);\n        }\n      };\n\n      const onEnter = () => {\n        node.classList.add(...classToToken);\n        node.addEventListener('animationend', onEntered);\n        node.addEventListener('animationcancel', onEntered);\n      };\n\n      onEnter();\n    }, []);\n\n    useEffect(() => {\n      const node = nodeRef.current!;\n\n      const onExited = () => {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      };\n\n      const onExit = () => {\n        animationStep.current = AnimationStep.Exit;\n        node.className += ` ${exitClassName}`;\n        node.addEventListener('animationend', onExited);\n      };\n\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n\n    return <>{children}</>;\n  };\n}\n","import { Toast, ToastItem, ToastItemStatus } from '../types';\n\nexport function toToastItem(toast: Toast, status: ToastItemStatus): ToastItem {\n  return {\n    content: toast.content,\n    containerId: toast.props.containerId,\n    id: toast.props.toastId,\n    theme: toast.props.theme,\n    type: toast.props.type,\n    data: toast.props.data || {},\n    isLoading: toast.props.isLoading,\n    icon: toast.props.icon,\n    status\n  };\n}\n","import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastItem\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\n\nexport type OnChangeCallback = (toast: ToastItem) => void;\n\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, data: ToastItem): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer: TimeoutId = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n","import React, { cloneElement, isValidElement } from 'react';\n\nimport { Theme, ToastProps, TypeOptions } from '../types';\nimport { Default, isFn, isNum, isStr } from '../utils';\n\n/**\n * Used when providing custom icon\n */\nexport interface IconProps {\n  theme: Theme;\n  type: TypeOptions;\n}\n\nexport type BuiltInIconProps = React.SVGProps<SVGSVGElement> & IconProps;\n\nconst Svg: React.FC<BuiltInIconProps> = ({ theme, type, ...rest }) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"100%\"\n    height=\"100%\"\n    fill={\n      theme === 'colored'\n        ? 'currentColor'\n        : `var(--toastify-icon-color-${type})`\n    }\n    {...rest}\n  />\n);\n\nfunction Warning(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\" />\n    </Svg>\n  );\n}\n\nfunction Info(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\" />\n    </Svg>\n  );\n}\n\nfunction Success(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\" />\n    </Svg>\n  );\n}\n\nfunction Error(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\" />\n    </Svg>\n  );\n}\n\nfunction Spinner() {\n  return <div className={`${Default.CSS_NAMESPACE}__spinner`} />;\n}\n\nexport const Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n\nconst maybeIcon = (type: string): type is keyof typeof Icons => type in Icons;\n\nexport function getIcon({ theme, type, isLoading, icon }: ToastProps) {\n  let Icon: React.ReactNode = null;\n  const iconProps = { theme, type };\n\n  if (icon === false) {\n    // hide\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon) || isNum(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  } else if (maybeIcon(type)) {\n    Icon = Icons[type](iconProps);\n  }\n\n  return Icon;\n}\n","import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement,\n  useState\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  isToastIdValid,\n  getAutoCloseDelay,\n  toToastItem\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\n\nimport { getIcon } from '../components/Icons';\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null | undefined;\n  queue: QueuedToast[];\n  count: number;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState<Id[]>([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map<Id, Toast>()).current;\n  const isToastActive = (id: Id) => toastIds.indexOf(id) !== -1;\n  const instance = useRef<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n      return () => {\n        toastToRender.clear();\n        eventManager.emit(Event.WillUnmount, instance);\n      };\n  }, []);\n\n  useEffect(() => {\n    instance.props = props;\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n  });\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit } = instance.props;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    setToastIds(state =>\n      isToastIdValid(toastId) ? state.filter(id => id !== toastId) : []\n    );\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } =\n      instance.queue.shift() as QueuedToast;\n    appendToast(toastContent, toastProps, staleId);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid(options: NotValidatedToastProps) {\n    return (\n      !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        options.containerId !== instance.props.containerId) ||\n      (toastToRender.has(options.toastId) && options.updateId == null)\n    );\n  }\n\n  // this function and all the function called inside needs to rely on refs\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId, data } = options;\n    const { props } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = updateId == null;\n\n    if (isNotAnUpdate) instance.count++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      data,\n      containerId: options.containerId,\n      isLoading: options.isLoading,\n      theme: options.theme || props.theme!,\n      icon: options.icon != null ? options.icon : props.icon,\n      isIn: false,\n      key: options.key || instance.toastKey++,\n      type: options.type!,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent:\n        options.draggablePercent || (props.draggablePercent as number),\n      draggableDirection:\n        options.draggableDirection || props.draggableDirection,\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: options.isLoading\n        ? false\n        : getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: options.role || props.role,\n      deleteToast() {\n        const removed = toToastItem(toastToRender.get(toastId)!, 'removed');\n        toastToRender.delete(toastId);\n\n        eventManager.emit(Event.Change, removed);\n\n        const queueLen = instance.queue.length;\n        instance.count = isToastIdValid(toastId)\n          ? instance.count - 1\n          : instance.count - instance.displayedToast;\n\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit!;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    };\n\n    toastProps.iconOut = getIcon(toastProps);\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton)\n        ? props.closeButton\n        : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps, data });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      instance.count > props.limit &&\n      isNotAnUpdate\n    ) {\n      instance.queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay)) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    if (staleId) toastToRender.delete(staleId);\n\n    const toast = {\n      content,\n      props: toastProps\n    };\n    toastToRender.set(toastId, toast);\n\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n    eventManager.emit(\n      Event.Change,\n      toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated')\n    );\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toRender = new Map<ToastPosition, Toast[]>();\n    const collection = Array.from(toastToRender.values());\n\n    if (props.newestOnTop) collection.reverse();\n\n    collection.forEach(toast => {\n      const { position } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position)!.push(toast);\n    });\n\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n","import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn, Default, Direction, SyntheticEvent } from '../utils';\nimport { ToastProps } from '../types';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  delta: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n  didMove: boolean;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useRef<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    syncProps.current = props;\n  });\n\n  useEffect(() => {\n    if (toastRef.current)\n      toastRef.current.addEventListener(\n        SyntheticEvent.ENTRANCE_ANIMATION_END,\n        playToast,\n        { once: true }\n      );\n\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose))\n        props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (props.draggable) {\n      bindDragEvents();\n      const toast = toastRef.current!;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent as DragEvent);\n      drag.y = getY(e.nativeEvent as DragEvent);\n\n      if (props.draggableDirection === Direction.X) {\n        drag.start = drag.x;\n        drag.removalDistance =\n          toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance =\n          toast.offsetHeight *\n          (props.draggablePercent === Default.DRAGGABLE_PERCENT\n            ? props.draggablePercent * 1.5\n            : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e as DragEvent);\n      drag.y = getY(e as DragEvent);\n      if (props.draggableDirection === Direction.X) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      }\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = `translate${props.draggableDirection}(${drag.delta}px)`;\n      toast.style.opacity = `${\n        1 - Math.abs(drag.delta / drag.removalDistance)\n      }`;\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current!;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = `translate${props.draggableDirection}(0)`;\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n","import React from 'react';\nimport { Default } from '../utils';\nimport { Theme, TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n  theme: Theme;\n}\n\nexport function CloseButton({\n  closeToast,\n  theme,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${Default.CSS_NAMESPACE}__close-button ${Default.CSS_NAMESPACE}__close-button--${theme}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n","import React from 'react';\nimport cx from 'clsx';\n\nimport { TYPE, Default, isFn } from './../utils';\nimport { TypeOptions, ToastClassName, Theme } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * The theme that is currently used\n   */\n  theme: Theme;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn,\n  theme\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${Default.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${Default.CSS_NAMESPACE}__progress-bar--animated`,\n    `${Default.CSS_NAMESPACE}__progress-bar-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  );\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n\n  // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-hidden={hide ? 'true' : 'false'}\n      aria-label=\"notification timer\"\n      className={classNames}\n      style={style}\n      {...animationEvent}\n    />\n  );\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n","import React from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { CloseButton } from './CloseButton';\nimport { ToastProps } from '../types';\nimport { Default, isFn } from '../utils';\nimport { useToast } from '../hooks/useToast';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const { isRunning, preventExitTransition, toastRef, eventHandlers } =\n    useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    iconOut,\n    theme\n  } = props;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__toast`,\n    `${Default.CSS_NAMESPACE}__toast-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__toast--rtl`]: rtl\n    }\n  );\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n  const isProgressControlled = !!progress;\n\n  const closeButtonProps = { closeToast, type, theme };\n  let Close: React.ReactNode = null;\n\n  if (closeButton === false) {\n    // hide\n  } else if (isFn(closeButton)) {\n    Close = closeButton(closeButtonProps);\n  } else if (React.isValidElement(closeButton)) {\n    Close = React.cloneElement(closeButton, closeButtonProps);\n  } else {\n    Close = CloseButton(closeButtonProps);\n  }\n\n  return (\n    <Transition\n      isIn={isIn}\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(isIn && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${Default.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {iconOut != null && (\n            <div\n              className={cx(`${Default.CSS_NAMESPACE}__toast-icon`, {\n                [`${Default.CSS_NAMESPACE}--animate-icon ${Default.CSS_NAMESPACE}__zoom-enter`]:\n                  !isLoading\n              })}\n            >\n              {iconOut}\n            </div>\n          )}\n          <div>{children}</div>\n        </div>\n        {Close}\n        {(autoClose || isProgressControlled) && (\n          <ProgressBar\n            {...(updateId && !isProgressControlled\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            theme={theme}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={isIn}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={isProgressControlled}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n","import { Default, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-exit`,\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n","// https://github.com/yannickcr/eslint-plugin-react/issues/3140\n/* eslint react/prop-types: \"off\" */\nimport React, { forwardRef, StyleHTMLAttributes, useEffect } from 'react';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { POSITION, Direction, Default, parseClassName, isFn } from '../utils';\nimport { useToastContainer } from '../hooks/useToastContainer';\nimport { ToastContainerProps, ToastPosition } from '../types';\n\nexport const ToastContainer = forwardRef<HTMLDivElement, ToastContainerProps>(\n  (props, ref) => {\n    const { getToastToRender, containerRef, isToastActive } =\n      useToastContainer(props);\n    const { className, style, rtl, containerId } = props;\n\n    function getClassName(position: ToastPosition) {\n      const defaultClassName = cx(\n        `${Default.CSS_NAMESPACE}__toast-container`,\n        `${Default.CSS_NAMESPACE}__toast-container--${position}`,\n        { [`${Default.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n      );\n      return isFn(className)\n        ? className({\n            position,\n            rtl,\n            defaultClassName\n          })\n        : cx(defaultClassName, parseClassName(className));\n    }\n\n    useEffect(() => {\n      if (ref) {\n        (ref as React.MutableRefObject<HTMLDivElement>).current =\n          containerRef.current!;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={containerRef}\n        className={Default.CSS_NAMESPACE as string}\n        id={containerId as string}\n      >\n        {getToastToRender((position, toastList) => {\n          const containerStyle: React.CSSProperties = !toastList.length\n            ? { ...style, pointerEvents: 'none' }\n            : { ...style };\n\n          return (\n            <div\n              className={getClassName(position)}\n              style={containerStyle}\n              key={`container-${position}`}\n            >\n              {toastList.map(({ content, props: toastProps }, i) => {\n                return (\n                  <Toast\n                    {...toastProps}\n                    isIn={isToastActive(toastProps.toastId)}\n                    style={\n                      {\n                        ...toastProps.style,\n                        '--nth': i + 1,\n                        '--len': toastList.length\n                      } as StyleHTMLAttributes<HTMLDivElement>\n                    }\n                    key={`toast-${toastProps.key}`}\n                  >\n                    {content}\n                  </Toast>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n\nToastContainer.displayName = 'ToastContainer';\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: Default.DRAGGABLE_PERCENT as number,\n  draggableDirection: Direction.X,\n  role: 'alert',\n  theme: 'light'\n};\n","import { POSITION, TYPE, isStr, isNum, isFn, isToastIdValid } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  TypeOptions\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet queue: EnqueuedToast[] = [];\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = containers.get(containerId || latestInstance);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nfunction createToastByType(type: string) {\n  return (content: ToastContent, options?: ToastOptions) =>\n    dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast(content: ToastContent, options?: ToastOptions) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n}\n\ntoast.loading = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      isLoading: true,\n      autoClose: false,\n      closeOnClick: false,\n      closeButton: false,\n      draggable: false,\n      ...options\n    })\n  );\n\nexport interface ToastPromiseParams<T = unknown> {\n  pending?: string | UpdateOptions<void>;\n  success?: string | UpdateOptions<T>;\n  error?: string | UpdateOptions<any>;\n}\n\nfunction handlePromise<T = unknown>(\n  promise: Promise<T> | (() => Promise<T>),\n  { pending, error, success }: ToastPromiseParams<T>,\n  options?: ToastOptions\n) {\n  let id: Id;\n\n  if (pending) {\n    id = isStr(pending)\n      ? toast.loading(pending, options)\n      : toast.loading(pending.render, {\n          ...options,\n          ...(pending as ToastOptions)\n        });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null,\n    delay: 100\n  };\n\n  const resolver = (\n    type: TypeOptions,\n    input: string | UpdateOptions<T> | undefined,\n    result: T\n  ) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? { render: input } : input;\n\n    // if the id is set we know that it's an update\n    if (id) {\n      toast.update(id, {\n        ...baseParams,\n        ...params\n      });\n    } else {\n      // using toast.promise without loading\n      toast(params.render, {\n        ...baseParams,\n        ...params\n      } as ToastOptions);\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise;\n\n  //call the resolvers only when needed\n  p.then(result => resolver('success', success, result)).catch(err =>\n    resolver('error', error, err)\n  );\n\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(TYPE.SUCCESS);\ntoast.info = createToastByType(TYPE.INFO);\ntoast.error = createToastByType(TYPE.ERROR);\ntoast.warning = createToastByType(TYPE.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      theme: 'dark',\n      ...options\n    })\n  );\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) => {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Clear, id);\n  } else {\n    queue = queue.filter(t => isToastIdValid(id) && t.options.toastId !== id);\n  }\n};\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Subscribe to change when a toast is added, removed and updated\n *\n * Usage:\n * ```\n * const unsubscribe = toast.onChange((payload) => {\n *   switch (payload.status) {\n *   case \"added\":\n *     // new toast added\n *     break;\n *   case \"updated\":\n *     // toast updated\n *     break;\n *   case \"removed\":\n *     // toast has been removed\n *     break;\n *   }\n * })\n * ```\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  eventManager.on(Event.Change, callback);\n  return () => {\n    eventManager.off(Event.Change, callback);\n  };\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n  });\n\nexport { toast };\n"]},"metadata":{},"sourceType":"script"}